[{"C:\\Users\\ENA\\diabetes-frontend\\src\\index.tsx":"1","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\App.tsx":"2","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\Header.tsx":"3","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\Form.tsx":"4","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\formmodel.ts":"5","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\formcontainer.tsx":"6","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\reducer.tsx":"7"},{"size":287,"mtime":1658499757595,"results":"8","hashOfConfig":"9"},{"size":329,"mtime":1658636662745,"results":"10","hashOfConfig":"9"},{"size":467,"mtime":1658577761346,"results":"11","hashOfConfig":"9"},{"size":4637,"mtime":1658649237569,"results":"12","hashOfConfig":"9"},{"size":958,"mtime":1658645576228,"results":"13","hashOfConfig":"9"},{"size":1095,"mtime":1658647385895,"results":"14","hashOfConfig":"9"},{"size":1137,"mtime":1658572533449,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"bmafbg",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ENA\\diabetes-frontend\\src\\index.tsx",[],[],[],"C:\\Users\\ENA\\diabetes-frontend\\src\\components\\App.tsx",[],[],"C:\\Users\\ENA\\diabetes-frontend\\src\\components\\Header.tsx",[],[],[],"C:\\Users\\ENA\\diabetes-frontend\\src\\components\\Form.tsx",["40"],[],"import React, { useState,useEffect, ChangeEvent, FormEvent } from 'react'\r\nimport { FormData} from './reducer'\r\nimport {forms} from './formmodel'\r\n\r\ninterface Props {\r\n  onInputChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n  onSelectChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n  formData: FormData\r\n  initialFormData:FormData\r\n}\r\n\r\ntype Errors = {\r\n    field?:string,\r\n    email?:string\r\n}\r\n\r\ntype Data = {\r\n    Name : string ,\r\n    Email : string,\r\n    Pregnancies : number,\r\n    Glucose  : number,\r\n    BloodPressure  : number,\r\n    SkinThickness  : number,\r\n    Insulin  : number,\r\n    BMI  : number,\r\n    DiabetesPedigreeFunction  : number,\r\n    Age:number\r\n}\r\n\r\nconst Form:React.FC<Props> = ({ onInputChange, onSelectChange, formData, initialFormData }) => {\r\n    const [formErrors, setFormErrors ] = useState<Errors>({})\r\n    const [isSubmitted, setIsSubmitted] =  useState<boolean>(false)\r\n    const [success, setSuccess] = useState<string>('hidden')\r\n\r\n    const data:Data = {\r\n        Name : formData['user']['name'] ,\r\n        Email : formData['user']['email'],\r\n        Pregnancies : formData['user']['pregnancy'],\r\n        Glucose  : formData['user']['glucose'],\r\n        BloodPressure  : formData['user']['pressure'],\r\n        SkinThickness  : formData['user']['thickness'],\r\n        Insulin  : formData['user']['insulin'],\r\n        BMI  : formData['user']['bmi'],\r\n        DiabetesPedigreeFunction  : formData['family']['states'][0],\r\n\t    Age:formData['user']['age']\r\n    }\r\n\r\n    const onSubmit = (e: FormEvent) => {\r\n        e.preventDefault()\r\n        setFormErrors(validate(data))\r\n        setIsSubmitted(true)\r\n    }\r\n\r\n    let makeDiagnosis = async () => {\r\n        fetch(`http://127.0.0.1:8000/api/users/diagnosis/`, {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n            },\r\n            body:JSON.stringify(data)\r\n        })\r\n    }    \r\n\r\n    const reset = () => {\r\n        formData = initialFormData\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(Object.keys(formErrors).length === 0 && isSubmitted){\r\n            makeDiagnosis()\r\n            setSuccess('')\r\n            reset()\r\n        }\r\n    }, [formErrors, isSubmitted])\r\n\r\n    let validate = (data:Data) => {\r\n        const errors:Errors = {};\r\n        const regex = new RegExp('[a-z0-9]+@[a-z]+.[a-z]{2,3}');\r\n        if (data.Name === '' || data.Age === 0 || !data.DiabetesPedigreeFunction  ){\r\n            errors.field = 'Please fill all fields'\r\n        }\r\n        if (data.Email === ''){\r\n            errors.email = 'Email address is required'\r\n        }else if (!regex.test(data.Email)){\r\n            errors.email = 'Please enter a valid Email address'\r\n        }\r\n        return errors\r\n       \r\n    };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      {\r\n        forms.map((form, index)=>(\r\n          <div key={index} className='flex flex-col my-2'>\r\n            <label className='my-2 font-bold'>{form.label}</label>\r\n            <input onChange={onInputChange} className='focus:outline-none focus:ring focus:border-blue-300 h-10 pl-4 text-lg border-2' type={form.type} name={form.name}/>\r\n          </div>  \r\n        ))\r\n      } \r\n      <label className='mb-2 mt-8 font-bold'>Do you have any known family history of diabetes? (Required)</label>\r\n      <div className='flex flex-col'>\r\n        <div className='flex items-center flex-row border-2 w-1/2 mt-2 h-10 pl-2'>\r\n            <input\r\n                type=\"radio\"\r\n                value=\"1\"\r\n                name='states'\r\n                onChange={onSelectChange}\r\n                className='mr-4'\r\n            />\r\n            <label className='text-lg font-semibold'>Yes I do</label>\r\n        </div>\r\n        <div className='flex items-center flex-row border-x-2 border-b-2 w-1/2 h-10 pl-2'>\r\n            <input\r\n                type=\"radio\"\r\n                value= '0'\r\n                name='states'\r\n                onChange={onSelectChange}\r\n                className='mr-4 mt-2'\r\n            />\r\n            <label className='text-lg font-semibold'>No I do not</label>\r\n        </div>\r\n      </div>\r\n      <p className='text-red-500 mt-2'>{formErrors.field}</p>\r\n      <p className='text-red-500'>{formErrors.email}</p>\r\n      <div className={success}><p className='text-green-500 mt-4 text-lg font-semibold'>You will receive an email with the results of this assessment</p></div>\r\n      <div className='flex items-center justify-center'><button type=\"submit\" className='bg-blue-600 text-white font-semibold  rounded-sm h-12 w-36 my-8 text-lg'>Submit</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\ENA\\diabetes-frontend\\src\\components\\formmodel.ts",[],[],"C:\\Users\\ENA\\diabetes-frontend\\src\\components\\formcontainer.tsx",[],[],"C:\\Users\\ENA\\diabetes-frontend\\src\\components\\reducer.tsx",[],[],{"ruleId":"41","severity":1,"message":"42","line":74,"column":8,"nodeType":"43","endLine":74,"endColumn":33,"suggestions":"44"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makeDiagnosis' and 'reset'. Either include them or remove the dependency array.","ArrayExpression",["45"],{"desc":"46","fix":"47"},"Update the dependencies array to be: [formErrors, isSubmitted, makeDiagnosis, reset]",{"range":"48","text":"49"},[2196,2221],"[formErrors, isSubmitted, makeDiagnosis, reset]"]